generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL") 
}

model cabinet {
  id        String      @id @default(uuid())
  number    String
  officeId  String
  createdAt DateTime    @default(now())
  creatorId String
  deletedAt DateTime?
  updatedAt DateTime    @updatedAt
  status    eCabinetStatus @default(AVAILABLE)
  office    office      @relation(fields: [officeId], references: [id])
  schedules schedule[]
  services  serviceRecord[]
  users     userOnCabinet[]
}

model userOnCabinet {
  cabinetId String
  userId    String
  cabinet   cabinet @relation(fields: [cabinetId], references: [id])
  user      user    @relation(fields: [userId], references: [id])

  @@id([cabinetId, userId])
}

model product {
  id          String    @id @default(uuid())
  name        String
  description String?
  volume      Float     @default(0)
  unit        String    @default("мл")
  quantity    Int
  prices      Int
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  deletedAt   DateTime?
  creatorId   String

  creator     user      @relation(fields: [creatorId], references: [id])
  sales       productSale[]
}

model productSale {
  id         String   @id @default(uuid())
  productId  String
  userId     String   
  quantity   Int
  price      Float
  totalPrice Float
  saleDate   DateTime @default(now())
  creatorId  String

  product    product  @relation(fields: [productId], references: [id])
  user       user     @relation(name: "UserSales", fields: [userId], references: [id]) // ← Изменено
}




model office {
  id        String    @id @default(uuid())
  number    String
  address   String
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  deletedAt DateTime?
  creatorId String

  cabinets  cabinet[]
  services  serviceRecord[]
}

model opportunity {
  id   String @id @default(uuid())
  name String
}

model position {
  id          String    @id @default(uuid())
  name        String
  description String?
}

model role {
  id          String    @id @default(uuid())
  name        String
  createdAt   DateTime  @default(now())
  deletedAt   DateTime?
  updatedAt   DateTime  @updatedAt
  description String    @default("Default Description")
  users       user[]
}

model service {
  id          String    @id @default(uuid())
  name        String
  description String?
  price       Int
  duration    Float
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  deletedAt   DateTime?
  creatorId   String

  serviceRecords serviceRecord[]
  categories    serviceCategory[] @relation("serviceToServiceCategory")
  reviews       review[]
  clientHistories clientHistory[]
  workersOnService workerOnService[]
}

model workerOnService {
  serviceId String
  userId    String
  creatorId String

  service   service @relation(fields: [serviceId], references: [id])
  worker    user    @relation(name: "workerRelation", fields: [userId], references: [id])
  creator   user    @relation(name: "creatorRelation", fields: [creatorId], references: [id])

  @@id([serviceId, userId])
}

model serviceRecord {
  id            String    @id @default(uuid())
  userId        String    
  workerId      String
  dateTime      DateTime
  serviceId     String
  officeId      String
  workCabinetId String
  result        String?
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt
  deletedAt     DateTime?

  user          user      @relation(name: "ClientRelation", fields: [userId], references: [id])
  worker        user      @relation(name: "WorkerRelation", fields: [workerId], references: [id])
  office        office    @relation(fields: [officeId], references: [id])
  service       service   @relation(fields: [serviceId], references: [id])
  cabinet       cabinet   @relation(fields: [workCabinetId], references: [id])
}



model user {
  id        String    @id @default(uuid())
  lastName  String
  firstName String
  middleName String?
  birthDate DateTime
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  login     String    @unique
  email     String    @unique
  password  String
  roleId    String
  telegramId String?  @unique
  deletedAt DateTime?     

  role        role        @relation(fields: [roleId], references: [id])
  workerOnServicesAsWorker workerOnService[] @relation(name: "workerRelation")
  workerOnServicesAsCreator workerOnService[] @relation(name: "creatorRelation")
  products    product[]
  schedules   schedule[]
  cabinets    userOnCabinet[]
  departments departmentUser[]

  reviews       review[]                @relation("UserReviews")
  productSales  productSale[]           @relation("UserSales")
  clientHistories clientHistory[]       @relation("UserHistories")
  serviceRecordsAsClient serviceRecord[] @relation(name: "ClientRelation")
  serviceRecordsAsWorker serviceRecord[] @relation(name: "WorkerRelation")
}


model department {
  id          String    @id @default(uuid())
  name        String
  description String
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  deletedAt   DateTime?
  users       departmentUser[]
}

model departmentUser {
  userId      String
  departmentId String
  department  department @relation(fields: [departmentId], references: [id])
  user        user        @relation(fields: [userId], references: [id])

  @@id([userId, departmentId])
}

model schedule {
  id        String    @id @default(uuid())
  date      DateTime
  startTime DateTime
  endTime   DateTime
  userId    String
  cabinetId String
  cabinet   cabinet   @relation(fields: [cabinetId], references: [id])
  user      user      @relation(fields: [userId], references: [id])
}

model serviceCategory {
  id          String    @id @default(uuid())
  name        String
  description String?
  services    service[] @relation("serviceToServiceCategory")
}

model clientHistory {
  id          String    @id @default(uuid())
  userId      String   
  serviceId   String
  date        DateTime
  feedbackId  String?

  user        user      @relation(name: "UserHistories", fields: [userId], references: [id])
  feedback    review?   @relation(fields: [feedbackId], references: [id])
  service     service   @relation(fields: [serviceId], references: [id])
}


model review {
  id          String    @id @default(uuid())
  serviceId   String
  userId      String    
  comment     String?
  grade       eGrade
  clientHistories clientHistory[]

  user        user      @relation(name: "UserReviews", fields: [userId], references: [id])
  service     service   @relation(fields: [serviceId], references: [id])
}

enum eStatusRecord {
  CANCELED
  DONE
  PROBLEMS
}

enum eCabinetStatus {
  AVAILABLE
  OCCUPIED
  UNDER_MAINTENANCE
}

enum eGrade {
  VERY_BAD
  BAD
  OK
  GOOD
  EXCELLENT
}