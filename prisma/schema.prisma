generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Cabinet {
  id        String          @id @default(uuid())
  number    String
  officeId  String
  createdAt DateTime        @default(now())
  creatorId String
  deletedAt DateTime?
  updatedAt DateTime        @updatedAt
  status    ECabinetStatus  @default(AVAILABLE)
  office    Office          @relation(fields: [officeId], references: [id])
  schedules Schedule[]
  services  ServiceRecord[]
  users     UserOnCabinet[]
}

model UserOnCabinet {
  cabinetId String
  userId    String
  cabinet   Cabinet @relation(fields: [cabinetId], references: [id])
  user      User    @relation(fields: [userId], references: [id])

  @@id([cabinetId, userId])
}

model Product {
  id          String        @id @default(uuid())
  name        String
  quantity    Int
  createdAt   DateTime      @default(now())
  updatedAt   DateTime      @updatedAt
  deletedAt   DateTime?
  description String?
  prices      Int
  creatorId   String
  unit        String        @default("мл")
  volume      Float         @default(0)
  User        User          @relation(fields: [creatorId], references: [id])
  ProductSale ProductSale[]
}

model Client {
  id              String          @id @default(uuid())
  telegramId      String          @unique
  firstName       String
  lastName        String
  middleName      String
  birthDate       DateTime
  createdAt DateTime        @default(now())
  updatedAt DateTime        @updatedAt
  deletedAt DateTime?
  clientHistories ClientHistory[]
  ProductSale     ProductSale[]
  reviews         Review[]
  serviceRecords  ServiceRecord[]
}

model Office {
  id        String          @id @default(uuid())
  number    String
  createdAt DateTime        @default(now())
  creatorId String
  deletedAt DateTime?
  updatedAt DateTime        @updatedAt
  address   String
  cabinets  Cabinet[]
  services  ServiceRecord[]
}

model Opportunity {
  id   String @id @default(uuid())
  name String
}

model Position {
  id          String  @id @default(uuid())
  name        String
  description String?
}

model Role {
  id          String    @id @default(uuid())
  name        String
  createdAt   DateTime  @default(now())
  deletedAt   DateTime?
  updatedAt   DateTime  @updatedAt
  description String    @default("Default Description")
  users       User[]
}

model Service {
  id              String            @id @default(uuid())
  name            String
  description     String?
  price           Int
  createdAt       DateTime          @default(now())
  deletedAt       DateTime?
  updatedAt       DateTime          @updatedAt
  creatorId       String
  clientHistories ClientHistory[]
  reviews         Review[]
  User            User              @relation(fields: [creatorId], references: [id])
  serviceRecords  ServiceRecord[]
  WorkerOnService WorkerOnService[]
  categories      ServiceCategory[] @relation("ServiceToServiceCategory")
}

model ServiceRecord {
  id            String   @id @default(uuid())
  clientId      String
  workerId      String
  dateTime      DateTime
  price         Float
  serviceId     String
  officeId      String
  workCabinetId String
  result        String?
  client        Client   @relation(fields: [clientId], references: [id])
  office        Office   @relation(fields: [officeId], references: [id])
  service       Service  @relation(fields: [serviceId], references: [id])
  cabinet       Cabinet  @relation(fields: [workCabinetId], references: [id])
  worker        User     @relation(fields: [workerId], references: [id])
}

model User {
  id                                              String            @id @default(uuid())
  lastName                                        String
  firstName                                       String
  middleName                                      String?
  birthDate                                       DateTime
  createdAt                                       DateTime          @default(now())
  login                                           String            @unique
  email                                           String            @unique
  password                                        String
  roleId                                          String?           // Сделано необязательным
  telegramId                                      String?           @unique
  updatedAt                                       DateTime          @updatedAt
  departments                                     DepartmentUser[]
  Product                                         Product[]
  schedules                                       Schedule[]
  Service                                         Service[]
  services                                        ServiceRecord[]
  role                                            Role?             @relation(fields: [roleId], references: [id]) // Сделано необязательным
  cabinets                                        UserOnCabinet[]
  WorkerOnService_WorkerOnService_creatorIdToUser WorkerOnService[] @relation("WorkerOnService_creatorIdToUser")
  WorkerOnService_WorkerOnService_userIdToUser    WorkerOnService[] @relation("WorkerOnService_userIdToUser")
}

model Department {
  id          String           @id @default(uuid())
  name        String
  description String
  createdAt   DateTime         @default(now())
  updatedAt   DateTime         @updatedAt
  deletedAt   DateTime?
  users       DepartmentUser[]
}

model DepartmentUser {
  userId       String
  departmentId String
  department   Department @relation(fields: [departmentId], references: [id])
  user         User       @relation(fields: [userId], references: [id])

  @@id([userId, departmentId])
}

model Schedule {
  id        String   @id @default(uuid())
  date      DateTime
  startTime DateTime
  endTime   DateTime
  userId    String
  cabinetId String
  cabinet   Cabinet  @relation(fields: [cabinetId], references: [id])
  user      User     @relation(fields: [userId], references: [id])
}

model ServiceCategory {
  id          String    @id @default(uuid())
  name        String
  description String?
  services    Service[] @relation("ServiceToServiceCategory")
}

model ClientHistory {
  id         String   @id @default(uuid())
  clientId   String
  serviceId  String
  date       DateTime
  feedbackId String?
  client     Client   @relation(fields: [clientId], references: [id])
  feedback   Review?  @relation(fields: [feedbackId], references: [id])
  service    Service  @relation(fields: [serviceId], references: [id])
}

model Review {
  id              String          @id @default(uuid())
  serviceId       String
  clientId        String
  comment         String?
  grade           EGrade
  clientHistories ClientHistory[]
  client          Client          @relation(fields: [clientId], references: [id])
  service         Service         @relation(fields: [serviceId], references: [id])
}

model ProductSale {
  id         String   @id
  productId  String
  clientId   String
  quantity   Int
  price      Float
  totalPrice Float
  saleDate   DateTime @default(now())
  creatorId  String
  Client     Client   @relation(fields: [clientId], references: [id])
  Product    Product  @relation(fields: [productId], references: [id])
}

model WorkerOnService {
  serviceId                            String
  userId                               String
  creatorId                            String
  User_WorkerOnService_creatorIdToUser User    @relation("WorkerOnService_creatorIdToUser", fields: [creatorId], references: [id])
  Service                              Service @relation(fields: [serviceId], references: [id])
  User_WorkerOnService_userIdToUser    User    @relation("WorkerOnService_userIdToUser", fields: [userId], references: [id])

  @@id([serviceId, userId])
}

enum EStatusRecord {
  CANCELED
  DONE
  PROBLEMS
}

enum ECabinetStatus {
  AVAILABLE
  OCCUPIED
  UNDER_MAINTENANCE
}

enum EGrade {
  VERY_BAD
  BAD
  OK
  GOOD
  EXCELLENT
}
