generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// Кабинеты
model Cabinet {
  id         String   @id @default(uuid())
  number     String
  status     ECabinetStatus @default(AVAILABLE)
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt
  deletedAt  DateTime?
  creatorId  String
  officeId   String

  office     Office @relation(fields: [officeId], references: [id])
  schedules  Schedule[]
  users      UserOnCabinet[]
  services   ServiceRecord[]
}

// Люди в кабинетах
model UserOnCabinet {
  cabinetId String
  userId    String

  cabinet   Cabinet @relation(fields: [cabinetId], references: [id])
  user      User    @relation(fields: [userId], references: [id])

  @@id([cabinetId, userId]) 
}

// Продукты
model Product {
  id          String         @id @default(uuid())
  name        String
  description String?  
  volume      Float    @default(0) 
  unit        String   @default("мл")
  quantity    Int
  prices      Int
  createdAt   DateTime       @default(now())
  updatedAt   DateTime       @updatedAt
  deletedAt   DateTime?
  creatorId   String        

  creator     User           @relation(fields: [creatorId], references: [id]) 
  sales       ProductSale[]  
}



// Продажи товаров
model ProductSale {
  id          String   @id @default(uuid())
  productId   String
  clientId    String
  quantity    Int
  price       Float
  totalPrice  Float     // цена за всё количество (quantity * price)
  saleDate    DateTime  @default(now())
  creatorId   String

  product     Product   @relation(fields: [productId], references: [id])
  client      Client    @relation(fields: [clientId], references: [id])
}

// Клиенты
model Client {
  id         String   @id @default(uuid())
  telegramId String   @unique
  firstName  String
  lastName   String
  middleName String
  birthDate  DateTime

  serviceRecords ServiceRecord[]
  clientHistories ClientHistory[]
  reviews    Review[]
  productSales    ProductSale[] // Продажи товаров для клиента
}

// Офисы
model Office {
  id         String   @id @default(uuid())
  number     String
  address    String
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt
  deletedAt  DateTime?
  creatorId  String

  cabinets   Cabinet[]
  services   ServiceRecord[]
}

// Возможности
model Opportunity {
  id   String @id @default(uuid())
  name String
}

// Позиции
model Position {
  id          String   @id @default(uuid())
  name        String
  description String?
}

// Роли
model Role {
  id          String   @id @default(uuid())
  name        String
  description String   @default("Default Description")
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  deletedAt   DateTime?
  creatorId   String

  users       User[]
}

// Услуги
model Service {
  id            String   @id @default(uuid())
  name          String
  description   String?
  price         Int
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt
  deletedAt     DateTime?
  creatorId     String

  creator       User     @relation(fields: [creatorId], references: [id]) // Связь с User
  
  serviceRecords ServiceRecord[]
  categories     ServiceCategory[]
  reviews        Review[]
  clientHistories ClientHistory[]
}

// Записи услуг
model ServiceRecord {
  id            String   @id @default(uuid())
  clientId      String
  workerId      String
  dateTime      DateTime
  price         Float
  serviceId     String
  officeId      String
  workCabinetId String
  result        String?

  client        Client   @relation(fields: [clientId], references: [id])
  worker        User     @relation(fields: [workerId], references: [id])
  service       Service  @relation(fields: [serviceId], references: [id])
  office        Office   @relation(fields: [officeId], references: [id])
  cabinet       Cabinet  @relation(fields: [workCabinetId], references: [id])
}

// Пользователи
model User {
  id          String   @id @default(uuid())
  lastName    String
  firstName   String
  middleName  String?
  birthDate   DateTime
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  login       String   @unique
  email       String   @unique
  password    String
  roleId      String
  telegramId  String?  @unique

  role        Role     @relation(fields: [roleId], references: [id])
  products    Product[] 
  schedules   Schedule[]
  cabinets    UserOnCabinet[]
  servicesRecord   ServiceRecord[]
  services    Service[]
  departments DepartmentUser[]
}


// Отделы
model Department {
  id          String   @id @default(uuid())
  name        String
  description String
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  deletedAt   DateTime?
  creatorId   String

  users       DepartmentUser[]
}

// Пользователи в отделах
model DepartmentUser {
  userId       String
  departmentId String

  user         User      @relation(fields: [userId], references: [id])
  department   Department @relation(fields: [departmentId], references: [id])

  @@id([userId, departmentId])
}

// Расписание
model Schedule {
  id         String   @id @default(uuid())
  date       DateTime
  startTime  DateTime
  endTime    DateTime
  userId     String
  cabinetId  String

  user       User     @relation(fields: [userId], references: [id])
  cabinet    Cabinet  @relation(fields: [cabinetId], references: [id])
}

// Категории услуг
model ServiceCategory {
  id          String   @id @default(uuid())
  name        String
  description String?

  services    Service[]
}

// История клиентов
model ClientHistory {
  id          String   @id @default(uuid())
  clientId    String
  serviceId   String
  date        DateTime
  feedbackId  String?

  client      Client   @relation(fields: [clientId], references: [id])
  service     Service  @relation(fields: [serviceId], references: [id])
  feedback    Review?  @relation(fields: [feedbackId], references: [id])
}

// Отзывы
model Review {
  id         String   @id @default(uuid())
  serviceId  String
  clientId   String
  grade      EGrade
  comment    String?

  service    Service  @relation(fields: [serviceId], references: [id])
  client     Client   @relation(fields: [clientId], references: [id])
  clientHistories ClientHistory[]
}

// Статусы заказа
enum EStatusRecord {
  CANCELED
  DONE
  PROBLEMS
}

// Статусы кабинетов
enum ECabinetStatus {
  AVAILABLE
  OCCUPIED
  UNDER_MAINTENANCE
}

// Оценка
enum EGrade {
  VERY_BAD
  BAD
  OK
  GOOD
  EXCELLENT
}
